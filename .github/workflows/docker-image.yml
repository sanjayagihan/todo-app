name: Build, Test, and Deploy Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build Docker image
        run: |
          docker build -t todo-list-api .

      - name: Run Docker containers
        run: |
          docker-compose up -d

      - name: Wait for MongoDB and Application to start
        run: |
          sleep 10 # Ensure MongoDB and the application have time to start

      - name: Check Application Logs
        run: |
          docker-compose logs app

      - name: Seed the database
        run: |
          docker-compose exec app node seed.js

      - name: Test Create Task
        run: |
          response=$(curl -s -w "\n%{http_code}" -X POST http://localhost:3000/tasks \
          -H "Content-Type: application/json" \
          -d '{"title": "Finish the project", "completed": false}')
          body=$(echo "$response" | head -n -1)  # Extract the body (everything except the last line)
          status_code=$(echo "$response" | tail -n 1)  # Extract the status code (the last line)
          
          # Check if the status code is 201
          if [ "$status_code" -ne 201 ]; then
            echo "Unexpected status code: $status_code"
            echo "$body"
            exit 1
          fi

          # Optionally, print the response body
          echo "$body"

      - name: Test Get All Tasks
        run: |
          response=$(curl -s -w "\n%{http_code}" -X GET http://localhost:3000/tasks)
          body=$(echo "$response" | head -n -1)  # Extract the body (everything except the last line)
          status_code=$(echo "$response" | tail -n 1)  # Extract the status code (the last line)

          # Check if the status code is 200
          if [ "$status_code" -ne 200 ]; then
            echo "Unexpected status code: $status_code"
            echo "$body"
            exit 1
          fi

          # Optionally, print the response body
          echo "$body"

      - name: Test Get Task by ID
        run: |
          # Assuming task ID is '1' for simplicity, you may need to capture it dynamically
          response=$(curl -s -w "\n%{http_code}" -X GET http://localhost:3000/tasks/1)
          body=$(echo "$response" | head -n -1)  # Extract the body (everything except the last line)
          status_code=$(echo "$response" | tail -n 1)  # Extract the status code (the last line)

          # Check if the status code is 200
          if [ "$status_code" -ne 200 ]; then
            echo "Unexpected status code: $status_code"
            echo "$body"
            exit 1
          fi

          # Optionally, print the response body
          echo "$body"

      - name: Test Update Task by ID
        run: |
          # Assuming task ID is '1' for simplicity, you may need to capture it dynamically
          response=$(curl -s -w "\n%{http_code}" -X PUT http://localhost:3000/tasks/1 \
          -H "Content-Type: application/json" \
          -d '{"title": "Finish the project", "completed": true}')
          body=$(echo "$response" | head -n -1)  # Extract the body (everything except the last line)
          status_code=$(echo "$response" | tail -n 1)  # Extract the status code (the last line)

          # Check if the status code is 200
          if [ "$status_code" -ne 200 ]; then
            echo "Unexpected status code: $status_code"
            echo "$body"
            exit 1
          fi

          # Optionally, print the response body
          echo "$body"

      - name: Test Delete Task by ID
        run: |
          # Assuming task ID is '1' for simplicity, you may need to capture it dynamically
          response=$(curl -s -w "\n%{http_code}" -X DELETE http://localhost:3000/tasks/1)
          body=$(echo "$response" | head -n -1)  # Extract the body (everything except the last line)
          status_code=$(echo "$response" | tail -n 1)  # Extract the status code (the last line)

          # Check if the status code is 200
          if [ "$status_code" -ne 200 ]; then
            echo "Unexpected status code: $status_code"
            echo "$body"
            exit 1
          fi

          # Optionally, print the response body
          echo "$body"

      - name: Stop and remove Docker containers
        run: |
          docker-compose down
